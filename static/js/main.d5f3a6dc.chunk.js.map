{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","helper.js","App.js","reportWebVitals.js","index.js"],"names":["Square","value","onClick","className","Board","squares","map","square","i","styles","width","margin","Game","useState","Array","fill","board","setBoard","xIsNext","setXisNext","winner","lines","length","a","b","c","calculateWinner","boardCopy","style","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mMAaeA,EATA,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,QAAV,OAIX,wBAAQA,QAASA,EAASC,UAAU,cAApC,SACKF,KCIMG,EARD,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASH,EAAZ,EAAYA,QAAZ,OACV,qBAAKC,UAAU,aAAf,SACKE,EAAQC,KAAI,SAACC,EAAQC,GAAT,OACb,cAAC,EAAD,CAAgBP,MAAOM,EAAQL,QAAS,kBAAMA,EAAQM,KAAzCA,SCJfC,EAAS,CACXC,MAAO,QACPC,OAAQ,aA6CGC,EA1CF,WAAO,IAAD,EACWC,mBAASC,MAAM,GAAGC,KAAK,OADlC,mBACRC,EADQ,KACDC,EADC,OAEeJ,oBAAS,GAFxB,mBAERK,EAFQ,KAECC,EAFD,KAGTC,ECZH,SAAyBf,GAW5B,IAVA,IAAMgB,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAb,EAAI,EAAGA,EAAIa,EAAMC,OAAQd,IAAK,CAAC,IAAD,cACnBa,EAAMb,GADa,GAC9Be,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIpB,EAAQkB,IAAMlB,EAAQkB,KAAOlB,EAAQmB,IAAMnB,EAAQkB,KAAOlB,EAAQoB,GACpE,OAAOpB,EAAQkB,GAGnB,OAAO,KDLQG,CAAgBV,GAyB/B,OACI,qCACA,oBAAIb,UAAU,YAAd,gCACA,cAAC,EAAD,CAAOE,QAASW,EAAOd,QA1BP,SAACM,GACjB,IAAMmB,EAAS,YAAOX,GAElBI,GAAUO,EAAUnB,KAExBmB,EAAUnB,GAAKU,EAAU,IAAM,IAC/BD,EAASU,GACTR,GAAYD,OAoBZ,sBAAKU,MAAOnB,EAAZ,UACJ,mBAAGN,UAAU,WAAb,SACGiB,EAAS,WAAaA,EAAS,iBAAmBF,EAAU,IAAM,OAbjE,qBAAKf,UAAU,SAAf,SACI,wBAAQD,QAAS,kBAAMe,EAASH,MAAM,GAAGC,KAAK,QAAQZ,UAAU,MAAhE,mCE3BG0B,EAFH,kBAAM,cAAC,EAAD,KCUHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.d5f3a6dc.chunk.js","sourcesContent":["import React from 'react';\nimport '../App.css'\n\n\nconst Square = ({ value, onClick }) => (\n\n\n    \n    <button onClick={onClick} className=\"squareStyle\">\n        {value}\n    </button>\n);\n\nexport default Square;","import React from 'react';\nimport Square from './Square';\n\n\n\nconst Board = ({ squares, onClick }) => (\n    <div className=\"boardstyle\">\n        {squares.map((square, i) => (\n        <Square key={i} value={square} onClick={() => onClick(i)} />\n))}\n    </div>\n)\n\nexport default Board;","import React, {useState} from 'react';\nimport {calculateWinner} from '../helper'\nimport Board from './Board';\n\nconst styles = {\n    width: '200px',\n    margin: '20px auto',\n};\n\nconst Game = () => {\n    const [board, setBoard] = useState(Array(9).fill(null));\n    const [xIsNext, setXisNext] = useState(true);\n    const winner = calculateWinner(board);\n\n    const handleClick = (i) => {\n        const boardCopy = [...board];\n        // If user click an occupied square or if game is won, return\n        if (winner || boardCopy[i]) return;\n        // Put an X or an O in the clicked square\n        boardCopy[i] = xIsNext ? \"X\" : \"O\";\n        setBoard(boardCopy);\n        setXisNext(!xIsNext);\n    }\n    \n    const jumpTo = () => {\n        \n    }\n    \n    const renderMoves = () => {\n        return( \n        <div className=\"btndiv\">\n            <button onClick={() => setBoard(Array(9).fill(null))} className=\"btn\"> Start Game </button>\n        </div>\n        \n        )\n    }\n    \n    return (\n        <>\n        <h1 className=\"name-game\"> enjoy tic-tac-toe</h1>\n        <Board squares={board} onClick={handleClick} />\n        <div style={styles}>\n    <p className=\"nextmove\">\n      {winner ? \"Winner: \" + winner : \"Next Player: \" + (xIsNext ? \"X\" : \"O\")}\n    </p>\n    {renderMoves()}\n  </div>\n        </>\n    )\n}\n\nexport default Game;","export function calculateWinner(squares) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n    return null;\n  }\n  \n","import './App.css';\nimport Game from './components/Game'\nconst App = () => <Game />\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}